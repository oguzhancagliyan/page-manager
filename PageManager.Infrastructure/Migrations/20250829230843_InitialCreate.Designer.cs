// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PageManager.Infrastructure.Persistence;

#nullable disable

namespace PageManager.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250829230843_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PageManager.Domain.Entities.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("SiteId", "Slug")
                        .IsUnique();

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("PageManager.Domain.Entities.PageDraft", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DraftNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PageId", "DraftNumber")
                        .IsUnique();

                    b.ToTable("PageDrafts");
                });

            modelBuilder.Entity("PageManager.Domain.Entities.PagePublished", b =>
                {
                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DraftId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PublishedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PageId");

                    b.HasIndex("DraftId");

                    b.ToTable("PagePublished");
                });

            modelBuilder.Entity("PageManager.Domain.Entities.PageDraft", b =>
                {
                    b.HasOne("PageManager.Domain.Entities.Page", "Page")
                        .WithMany("Drafts")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("PageManager.Domain.Entities.PagePublished", b =>
                {
                    b.HasOne("PageManager.Domain.Entities.PageDraft", "Draft")
                        .WithMany()
                        .HasForeignKey("DraftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PageManager.Domain.Entities.Page", "Page")
                        .WithOne("Published")
                        .HasForeignKey("PageManager.Domain.Entities.PagePublished", "PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Draft");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("PageManager.Domain.Entities.Page", b =>
                {
                    b.Navigation("Drafts");

                    b.Navigation("Published");
                });
#pragma warning restore 612, 618
        }
    }
}
